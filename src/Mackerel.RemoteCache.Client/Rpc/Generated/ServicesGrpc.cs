// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: services.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mackerel.RemoteCache.Api.V1 {
  /// <summary>
  /// Service definition for the Mackerel cache API. 
  /// A distributed in-memory key-value store.
  /// </summary>
  public static partial class MackerelCacheService
  {
    static readonly string __ServiceName = "Mackerel.RemoteCache.Api.MackerelCacheService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetRequest> __Marshaller_Mackerel_RemoteCache_Api_GetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetResponse> __Marshaller_Mackerel_RemoteCache_Api_GetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetManyRequest> __Marshaller_Mackerel_RemoteCache_Api_GetManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetManyResponse> __Marshaller_Mackerel_RemoteCache_Api_GetManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchRequest> __Marshaller_Mackerel_RemoteCache_Api_TouchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchResponse> __Marshaller_Mackerel_RemoteCache_Api_TouchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest> __Marshaller_Mackerel_RemoteCache_Api_TouchManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> __Marshaller_Mackerel_RemoteCache_Api_TouchManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlRequest> __Marshaller_Mackerel_RemoteCache_Api_TtlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlResponse> __Marshaller_Mackerel_RemoteCache_Api_TtlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest> __Marshaller_Mackerel_RemoteCache_Api_TtlManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> __Marshaller_Mackerel_RemoteCache_Api_TtlManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutRequest> __Marshaller_Mackerel_RemoteCache_Api_PutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutResponse> __Marshaller_Mackerel_RemoteCache_Api_PutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutManyRequest> __Marshaller_Mackerel_RemoteCache_Api_PutManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutManyResponse> __Marshaller_Mackerel_RemoteCache_Api_PutManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteRequest> __Marshaller_Mackerel_RemoteCache_Api_DeleteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteResponse> __Marshaller_Mackerel_RemoteCache_Api_DeleteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest> __Marshaller_Mackerel_RemoteCache_Api_DeleteManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> __Marshaller_Mackerel_RemoteCache_Api_DeleteManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest> __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest> __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest> __Marshaller_Mackerel_RemoteCache_Api_PutPartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> __Marshaller_Mackerel_RemoteCache_Api_PutPartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest> __Marshaller_Mackerel_RemoteCache_Api_FlushAllRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushAllRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> __Marshaller_Mackerel_RemoteCache_Api_FlushAllResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest> __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest> __Marshaller_Mackerel_RemoteCache_Api_ScanKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> __Marshaller_Mackerel_RemoteCache_Api_ScanKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementRequest> __Marshaller_Mackerel_RemoteCache_Api_IncrementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementResponse> __Marshaller_Mackerel_RemoteCache_Api_IncrementResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest> __Marshaller_Mackerel_RemoteCache_Api_IncrementByRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementByRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> __Marshaller_Mackerel_RemoteCache_Api_IncrementByResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementRequest> __Marshaller_Mackerel_RemoteCache_Api_DecrementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementResponse> __Marshaller_Mackerel_RemoteCache_Api_DecrementResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest> __Marshaller_Mackerel_RemoteCache_Api_DecrementByRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementByRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> __Marshaller_Mackerel_RemoteCache_Api_DecrementByResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetRequest, global::Mackerel.RemoteCache.Api.V1.GetResponse> __Method_Get = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetRequest, global::Mackerel.RemoteCache.Api.V1.GetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Mackerel_RemoteCache_Api_GetRequest,
        __Marshaller_Mackerel_RemoteCache_Api_GetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetManyRequest, global::Mackerel.RemoteCache.Api.V1.GetManyResponse> __Method_GetMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetManyRequest, global::Mackerel.RemoteCache.Api.V1.GetManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMany",
        __Marshaller_Mackerel_RemoteCache_Api_GetManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_GetManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchRequest, global::Mackerel.RemoteCache.Api.V1.TouchResponse> __Method_Touch = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchRequest, global::Mackerel.RemoteCache.Api.V1.TouchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Touch",
        __Marshaller_Mackerel_RemoteCache_Api_TouchRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TouchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> __Method_TouchMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TouchMany",
        __Marshaller_Mackerel_RemoteCache_Api_TouchManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TouchManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlRequest, global::Mackerel.RemoteCache.Api.V1.TtlResponse> __Method_Ttl = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlRequest, global::Mackerel.RemoteCache.Api.V1.TtlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ttl",
        __Marshaller_Mackerel_RemoteCache_Api_TtlRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TtlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> __Method_TtlMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TtlMany",
        __Marshaller_Mackerel_RemoteCache_Api_TtlManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TtlManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutRequest, global::Mackerel.RemoteCache.Api.V1.PutResponse> __Method_Put = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutRequest, global::Mackerel.RemoteCache.Api.V1.PutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Put",
        __Marshaller_Mackerel_RemoteCache_Api_PutRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutManyRequest, global::Mackerel.RemoteCache.Api.V1.PutManyResponse> __Method_PutMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutManyRequest, global::Mackerel.RemoteCache.Api.V1.PutManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutMany",
        __Marshaller_Mackerel_RemoteCache_Api_PutManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> __Method_PutIfNotExists = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfNotExists",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> __Method_PutIfNotExistsMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfNotExistsMany",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> __Method_PutIfExists = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfExists",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> __Method_PutIfExistsMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfExistsMany",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteRequest, global::Mackerel.RemoteCache.Api.V1.DeleteResponse> __Method_Delete = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteRequest, global::Mackerel.RemoteCache.Api.V1.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Mackerel_RemoteCache_Api_DeleteRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DeleteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> __Method_DeleteMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMany",
        __Marshaller_Mackerel_RemoteCache_Api_DeleteManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DeleteManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> __Method_FlushPartition = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushPartition",
        __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionRequest,
        __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> __Method_DeletePartition = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePartition",
        __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> __Method_PutPartition = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutPartition",
        __Marshaller_Mackerel_RemoteCache_Api_PutPartitionRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutPartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> __Method_FlushAll = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushAll",
        __Marshaller_Mackerel_RemoteCache_Api_FlushAllRequest,
        __Marshaller_Mackerel_RemoteCache_Api_FlushAllResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> __Method_ScanPartitions = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ScanPartitions",
        __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> __Method_ScanKeys = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ScanKeys",
        __Marshaller_Mackerel_RemoteCache_Api_ScanKeysRequest,
        __Marshaller_Mackerel_RemoteCache_Api_ScanKeysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementRequest, global::Mackerel.RemoteCache.Api.V1.IncrementResponse> __Method_Increment = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementRequest, global::Mackerel.RemoteCache.Api.V1.IncrementResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Increment",
        __Marshaller_Mackerel_RemoteCache_Api_IncrementRequest,
        __Marshaller_Mackerel_RemoteCache_Api_IncrementResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> __Method_IncrementBy = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncrementBy",
        __Marshaller_Mackerel_RemoteCache_Api_IncrementByRequest,
        __Marshaller_Mackerel_RemoteCache_Api_IncrementByResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementRequest, global::Mackerel.RemoteCache.Api.V1.DecrementResponse> __Method_Decrement = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementRequest, global::Mackerel.RemoteCache.Api.V1.DecrementResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Decrement",
        __Marshaller_Mackerel_RemoteCache_Api_DecrementRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DecrementResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> __Method_DecrementBy = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecrementBy",
        __Marshaller_Mackerel_RemoteCache_Api_DecrementByRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DecrementByResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mackerel.RemoteCache.Api.V1.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for MackerelCacheService</summary>
    public partial class MackerelCacheServiceClient : grpc::ClientBase<MackerelCacheServiceClient>
    {
      /// <summary>Creates a new client for MackerelCacheService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MackerelCacheServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MackerelCacheService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MackerelCacheServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MackerelCacheServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MackerelCacheServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets the value at the specified key.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.GetResponse Get(global::Mackerel.RemoteCache.Api.V1.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the value at the specified key.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.GetResponse Get(global::Mackerel.RemoteCache.Api.V1.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the value at the specified key.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.GetResponse> GetAsync(global::Mackerel.RemoteCache.Api.V1.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the value at the specified key.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.GetResponse> GetAsync(global::Mackerel.RemoteCache.Api.V1.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Gets the values at the specified keys.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.GetManyResponse GetMany(global::Mackerel.RemoteCache.Api.V1.GetManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the values at the specified keys.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.GetManyResponse GetMany(global::Mackerel.RemoteCache.Api.V1.GetManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMany, null, options, request);
      }
      /// <summary>
      /// Gets the values at the specified keys.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.GetManyResponse> GetManyAsync(global::Mackerel.RemoteCache.Api.V1.GetManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the values at the specified keys.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.GetManyResponse> GetManyAsync(global::Mackerel.RemoteCache.Api.V1.GetManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMany, null, options, request);
      }
      /// <summary>
      /// Updates the last access time of a key.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TouchResponse Touch(global::Mackerel.RemoteCache.Api.V1.TouchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Touch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the last access time of a key.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TouchResponse Touch(global::Mackerel.RemoteCache.Api.V1.TouchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Touch, null, options, request);
      }
      /// <summary>
      /// Updates the last access time of a key.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TouchResponse> TouchAsync(global::Mackerel.RemoteCache.Api.V1.TouchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TouchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the last access time of a key.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TouchResponse> TouchAsync(global::Mackerel.RemoteCache.Api.V1.TouchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Touch, null, options, request);
      }
      /// <summary>
      /// Updates the last access time of the specified keys.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TouchManyResponse TouchMany(global::Mackerel.RemoteCache.Api.V1.TouchManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TouchMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the last access time of the specified keys.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TouchManyResponse TouchMany(global::Mackerel.RemoteCache.Api.V1.TouchManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TouchMany, null, options, request);
      }
      /// <summary>
      /// Updates the last access time of the specified keys.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> TouchManyAsync(global::Mackerel.RemoteCache.Api.V1.TouchManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TouchManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the last access time of the specified keys.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> TouchManyAsync(global::Mackerel.RemoteCache.Api.V1.TouchManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TouchMany, null, options, request);
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of a key.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TtlResponse Ttl(global::Mackerel.RemoteCache.Api.V1.TtlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ttl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of a key.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TtlResponse Ttl(global::Mackerel.RemoteCache.Api.V1.TtlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ttl, null, options, request);
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of a key.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TtlResponse> TtlAsync(global::Mackerel.RemoteCache.Api.V1.TtlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TtlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of a key.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TtlResponse> TtlAsync(global::Mackerel.RemoteCache.Api.V1.TtlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ttl, null, options, request);
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of the specified keys.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TtlManyResponse TtlMany(global::Mackerel.RemoteCache.Api.V1.TtlManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TtlMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of the specified keys.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.TtlManyResponse TtlMany(global::Mackerel.RemoteCache.Api.V1.TtlManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TtlMany, null, options, request);
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of the specified keys.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> TtlManyAsync(global::Mackerel.RemoteCache.Api.V1.TtlManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TtlManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the remaining time to live (ms) of the specified keys.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> TtlManyAsync(global::Mackerel.RemoteCache.Api.V1.TtlManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TtlMany, null, options, request);
      }
      /// <summary>
      /// Sets a key-value in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new entry is created.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutResponse Put(global::Mackerel.RemoteCache.Api.V1.PutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Put(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a key-value in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new entry is created.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutResponse Put(global::Mackerel.RemoteCache.Api.V1.PutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Put, null, options, request);
      }
      /// <summary>
      /// Sets a key-value in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new entry is created.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutResponse> PutAsync(global::Mackerel.RemoteCache.Api.V1.PutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a key-value in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new entry is created.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutResponse> PutAsync(global::Mackerel.RemoteCache.Api.V1.PutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Put, null, options, request);
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache. If they already exist,
      /// they're updated, if they don't exist, new entries are created.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutManyResponse PutMany(global::Mackerel.RemoteCache.Api.V1.PutManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache. If they already exist,
      /// they're updated, if they don't exist, new entries are created.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutManyResponse PutMany(global::Mackerel.RemoteCache.Api.V1.PutManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutMany, null, options, request);
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache. If they already exist,
      /// they're updated, if they don't exist, new entries are created.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutManyResponse> PutManyAsync(global::Mackerel.RemoteCache.Api.V1.PutManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache. If they already exist,
      /// they're updated, if they don't exist, new entries are created.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutManyResponse> PutManyAsync(global::Mackerel.RemoteCache.Api.V1.PutManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutMany, null, options, request);
      }
      /// <summary>
      /// Sets a key-value in the cache only if it doesn't already exist.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse PutIfNotExists(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfNotExists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a key-value in the cache only if it doesn't already exist.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse PutIfNotExists(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutIfNotExists, null, options, request);
      }
      /// <summary>
      /// Sets a key-value in the cache only if it doesn't already exist.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> PutIfNotExistsAsync(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfNotExistsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a key-value in the cache only if it doesn't already exist.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> PutIfNotExistsAsync(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutIfNotExists, null, options, request);
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they don't already exist.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse PutIfNotExistsMany(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfNotExistsMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they don't already exist.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse PutIfNotExistsMany(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutIfNotExistsMany, null, options, request);
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they don't already exist.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> PutIfNotExistsManyAsync(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfNotExistsManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they don't already exist.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> PutIfNotExistsManyAsync(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutIfNotExistsMany, null, options, request);
      }
      /// <summary>
      /// Sets a key-value in the cache only if exists already.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse PutIfExists(global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfExists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a key-value in the cache only if exists already.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse PutIfExists(global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutIfExists, null, options, request);
      }
      /// <summary>
      /// Sets a key-value in the cache only if exists already.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> PutIfExistsAsync(global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfExistsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a key-value in the cache only if exists already.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> PutIfExistsAsync(global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutIfExists, null, options, request);
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they exist already.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse PutIfExistsMany(global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfExistsMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they exist already.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse PutIfExistsMany(global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutIfExistsMany, null, options, request);
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they exist already.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> PutIfExistsManyAsync(global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIfExistsManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they exist already.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> PutIfExistsManyAsync(global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutIfExistsMany, null, options, request);
      }
      /// <summary>
      /// Deletes a value by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DeleteResponse Delete(global::Mackerel.RemoteCache.Api.V1.DeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a value by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DeleteResponse Delete(global::Mackerel.RemoteCache.Api.V1.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes a value by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DeleteResponse> DeleteAsync(global::Mackerel.RemoteCache.Api.V1.DeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a value by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DeleteResponse> DeleteAsync(global::Mackerel.RemoteCache.Api.V1.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes multiple values by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse DeleteMany(global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes multiple values by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse DeleteMany(global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMany, null, options, request);
      }
      /// <summary>
      /// Deletes multiple values by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> DeleteManyAsync(global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes multiple values by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> DeleteManyAsync(global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMany, null, options, request);
      }
      /// <summary>
      /// Flushes the entire partition and resets the count stats. The partition metadata remains in the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse FlushPartition(global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushPartition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flushes the entire partition and resets the count stats. The partition metadata remains in the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse FlushPartition(global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FlushPartition, null, options, request);
      }
      /// <summary>
      /// Flushes the entire partition and resets the count stats. The partition metadata remains in the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> FlushPartitionAsync(global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushPartitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flushes the entire partition and resets the count stats. The partition metadata remains in the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> FlushPartitionAsync(global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FlushPartition, null, options, request);
      }
      /// <summary>
      /// Flushes the entire partition, resets the count stats, and removes the partition metadata from the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse DeletePartition(global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePartition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flushes the entire partition, resets the count stats, and removes the partition metadata from the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse DeletePartition(global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePartition, null, options, request);
      }
      /// <summary>
      /// Flushes the entire partition, resets the count stats, and removes the partition metadata from the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> DeletePartitionAsync(global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePartitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Flushes the entire partition, resets the count stats, and removes the partition metadata from the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> DeletePartitionAsync(global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePartition, null, options, request);
      }
      /// <summary>
      /// Sets a partition in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new partition is created.
      /// Only partitions created through this method have the option
      /// to have their metadata persisted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse PutPartition(global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutPartition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a partition in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new partition is created.
      /// Only partitions created through this method have the option
      /// to have their metadata persisted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse PutPartition(global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutPartition, null, options, request);
      }
      /// <summary>
      /// Sets a partition in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new partition is created.
      /// Only partitions created through this method have the option
      /// to have their metadata persisted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> PutPartitionAsync(global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutPartitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets a partition in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new partition is created.
      /// Only partitions created through this method have the option
      /// to have their metadata persisted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> PutPartitionAsync(global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutPartition, null, options, request);
      }
      /// <summary>
      /// Removes all data from the cache across all partitions.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.FlushAllResponse FlushAll(global::Mackerel.RemoteCache.Api.V1.FlushAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes all data from the cache across all partitions.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.FlushAllResponse FlushAll(global::Mackerel.RemoteCache.Api.V1.FlushAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FlushAll, null, options, request);
      }
      /// <summary>
      /// Removes all data from the cache across all partitions.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> FlushAllAsync(global::Mackerel.RemoteCache.Api.V1.FlushAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes all data from the cache across all partitions.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> FlushAllAsync(global::Mackerel.RemoteCache.Api.V1.FlushAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FlushAll, null, options, request);
      }
      /// <summary>
      /// Iterates all partitions and returns matching results based on a glob-style pattern.
      /// Only offers limited guarantees about the returned elements since the collection 
      /// that we iterate may change during the iteration process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> ScanPartitions(global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanPartitions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Iterates all partitions and returns matching results based on a glob-style pattern.
      /// Only offers limited guarantees about the returned elements since the collection 
      /// that we iterate may change during the iteration process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> ScanPartitions(global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ScanPartitions, null, options, request);
      }
      /// <summary>
      /// Iterates all keys in a given partition and returns matching results based on a glob-style pattern. 
      /// Only offers limited guarantees about the returned elements since the collection 
      /// that we iterate may change during the iteration process.
      /// As a side effect of calling this function, any matching keys:
      /// 1. A value gets expired if it reached it's TTL.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> ScanKeys(global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Iterates all keys in a given partition and returns matching results based on a glob-style pattern. 
      /// Only offers limited guarantees about the returned elements since the collection 
      /// that we iterate may change during the iteration process.
      /// As a side effect of calling this function, any matching keys:
      /// 1. A value gets expired if it reached it's TTL.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> ScanKeys(global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ScanKeys, null, options, request);
      }
      /// <summary>
      /// Increments a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.IncrementResponse Increment(global::Mackerel.RemoteCache.Api.V1.IncrementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Increment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increments a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.IncrementResponse Increment(global::Mackerel.RemoteCache.Api.V1.IncrementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Increment, null, options, request);
      }
      /// <summary>
      /// Increments a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.IncrementResponse> IncrementAsync(global::Mackerel.RemoteCache.Api.V1.IncrementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncrementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increments a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.IncrementResponse> IncrementAsync(global::Mackerel.RemoteCache.Api.V1.IncrementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Increment, null, options, request);
      }
      /// <summary>
      /// Increments a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.IncrementByResponse IncrementBy(global::Mackerel.RemoteCache.Api.V1.IncrementByRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncrementBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increments a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.IncrementByResponse IncrementBy(global::Mackerel.RemoteCache.Api.V1.IncrementByRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncrementBy, null, options, request);
      }
      /// <summary>
      /// Increments a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> IncrementByAsync(global::Mackerel.RemoteCache.Api.V1.IncrementByRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncrementByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increments a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> IncrementByAsync(global::Mackerel.RemoteCache.Api.V1.IncrementByRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncrementBy, null, options, request);
      }
      /// <summary>
      /// Decrements a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DecrementResponse Decrement(global::Mackerel.RemoteCache.Api.V1.DecrementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Decrement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrements a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DecrementResponse Decrement(global::Mackerel.RemoteCache.Api.V1.DecrementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Decrement, null, options, request);
      }
      /// <summary>
      /// Decrements a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DecrementResponse> DecrementAsync(global::Mackerel.RemoteCache.Api.V1.DecrementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecrementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrements a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DecrementResponse> DecrementAsync(global::Mackerel.RemoteCache.Api.V1.DecrementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Decrement, null, options, request);
      }
      /// <summary>
      /// Decrements a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DecrementByResponse DecrementBy(global::Mackerel.RemoteCache.Api.V1.DecrementByRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecrementBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrements a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.DecrementByResponse DecrementBy(global::Mackerel.RemoteCache.Api.V1.DecrementByRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecrementBy, null, options, request);
      }
      /// <summary>
      /// Decrements a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> DecrementByAsync(global::Mackerel.RemoteCache.Api.V1.DecrementByRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecrementByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrements a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> DecrementByAsync(global::Mackerel.RemoteCache.Api.V1.DecrementByRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecrementBy, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MackerelCacheServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MackerelCacheServiceClient(configuration);
      }
    }

  }
  public static partial class WatchService
  {
    static readonly string __ServiceName = "Mackerel.RemoteCache.Api.WatchService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.WatchRequest> __Marshaller_Mackerel_RemoteCache_Api_WatchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.WatchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.WatchResponse> __Marshaller_Mackerel_RemoteCache_Api_WatchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.WatchResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse> __Method_Watch = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Watch",
        __Marshaller_Mackerel_RemoteCache_Api_WatchRequest,
        __Marshaller_Mackerel_RemoteCache_Api_WatchResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mackerel.RemoteCache.Api.V1.ServicesReflection.Descriptor.Services[1]; }
    }

    /// <summary>Client for WatchService</summary>
    public partial class WatchServiceClient : grpc::ClientBase<WatchServiceClient>
    {
      /// <summary>Creates a new client for WatchService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WatchServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WatchService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WatchServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WatchServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WatchServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Watches for changes to keys. Both input and output are streams; 
      /// the input stream is for periodically sending heartbeats and the output
      /// stream sends key change events.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse> Watch(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Watch(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Watches for changes to keys. Both input and output are streams; 
      /// the input stream is for periodically sending heartbeats and the output
      /// stream sends key change events.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse> Watch(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Watch, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WatchServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WatchServiceClient(configuration);
      }
    }

  }
  public static partial class MaintenanceService
  {
    static readonly string __ServiceName = "Mackerel.RemoteCache.Api.MaintenanceService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest> __Marshaller_Mackerel_RemoteCache_Api_GetStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.CacheStats> __Marshaller_Mackerel_RemoteCache_Api_CacheStats = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.CacheStats.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetConfRequest> __Marshaller_Mackerel_RemoteCache_Api_GetConfRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetConfRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> __Marshaller_Mackerel_RemoteCache_Api_CacheConfiguration = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest> __Marshaller_Mackerel_RemoteCache_Api_InvokeGCRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> __Marshaller_Mackerel_RemoteCache_Api_InvokeGCResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PingRequest> __Marshaller_Mackerel_RemoteCache_Api_PingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PongResponse> __Marshaller_Mackerel_RemoteCache_Api_PongResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PongResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest> __Marshaller_Mackerel_RemoteCache_Api_GetPartitionStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PartitionStats> __Marshaller_Mackerel_RemoteCache_Api_PartitionStats = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PartitionStats.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest, global::Mackerel.RemoteCache.Api.V1.CacheStats> __Method_GetStats = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest, global::Mackerel.RemoteCache.Api.V1.CacheStats>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStats",
        __Marshaller_Mackerel_RemoteCache_Api_GetStatsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_CacheStats);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetConfRequest, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> __Method_GetConf = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetConfRequest, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConf",
        __Marshaller_Mackerel_RemoteCache_Api_GetConfRequest,
        __Marshaller_Mackerel_RemoteCache_Api_CacheConfiguration);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> __Method_InvokeGC = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InvokeGC",
        __Marshaller_Mackerel_RemoteCache_Api_InvokeGCRequest,
        __Marshaller_Mackerel_RemoteCache_Api_InvokeGCResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PingRequest, global::Mackerel.RemoteCache.Api.V1.PongResponse> __Method_Ping = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PingRequest, global::Mackerel.RemoteCache.Api.V1.PongResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_Mackerel_RemoteCache_Api_PingRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PongResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest, global::Mackerel.RemoteCache.Api.V1.PartitionStats> __Method_GetPartitionStats = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest, global::Mackerel.RemoteCache.Api.V1.PartitionStats>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPartitionStats",
        __Marshaller_Mackerel_RemoteCache_Api_GetPartitionStatsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PartitionStats);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mackerel.RemoteCache.Api.V1.ServicesReflection.Descriptor.Services[2]; }
    }

    /// <summary>Client for MaintenanceService</summary>
    public partial class MaintenanceServiceClient : grpc::ClientBase<MaintenanceServiceClient>
    {
      /// <summary>Creates a new client for MaintenanceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MaintenanceServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MaintenanceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MaintenanceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MaintenanceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MaintenanceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the global stats such as hits, misses, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.CacheStats GetStats(global::Mackerel.RemoteCache.Api.V1.GetStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the global stats such as hits, misses, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.CacheStats GetStats(global::Mackerel.RemoteCache.Api.V1.GetStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStats, null, options, request);
      }
      /// <summary>
      /// Returns the global stats such as hits, misses, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.CacheStats> GetStatsAsync(global::Mackerel.RemoteCache.Api.V1.GetStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the global stats such as hits, misses, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.CacheStats> GetStatsAsync(global::Mackerel.RemoteCache.Api.V1.GetStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStats, null, options, request);
      }
      /// <summary>
      /// Returns the configuration settings for the node
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.CacheConfiguration GetConf(global::Mackerel.RemoteCache.Api.V1.GetConfRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConf(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the configuration settings for the node
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.CacheConfiguration GetConf(global::Mackerel.RemoteCache.Api.V1.GetConfRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConf, null, options, request);
      }
      /// <summary>
      /// Returns the configuration settings for the node
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> GetConfAsync(global::Mackerel.RemoteCache.Api.V1.GetConfRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConfAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the configuration settings for the node
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> GetConfAsync(global::Mackerel.RemoteCache.Api.V1.GetConfRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConf, null, options, request);
      }
      /// <summary>
      /// Forces an immediate collection of all generations and compacts the LOH. This is not recommended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse InvokeGC(global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeGC(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Forces an immediate collection of all generations and compacts the LOH. This is not recommended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse InvokeGC(global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InvokeGC, null, options, request);
      }
      /// <summary>
      /// Forces an immediate collection of all generations and compacts the LOH. This is not recommended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> InvokeGCAsync(global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeGCAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Forces an immediate collection of all generations and compacts the LOH. This is not recommended.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> InvokeGCAsync(global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InvokeGC, null, options, request);
      }
      /// <summary>
      /// Ping the node to check availability
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PongResponse Ping(global::Mackerel.RemoteCache.Api.V1.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ping the node to check availability
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PongResponse Ping(global::Mackerel.RemoteCache.Api.V1.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// Ping the node to check availability
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PongResponse> PingAsync(global::Mackerel.RemoteCache.Api.V1.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ping the node to check availability
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PongResponse> PingAsync(global::Mackerel.RemoteCache.Api.V1.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// Returns partition level stats for a single partition. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PartitionStats GetPartitionStats(global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPartitionStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns partition level stats for a single partition. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Mackerel.RemoteCache.Api.V1.PartitionStats GetPartitionStats(global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPartitionStats, null, options, request);
      }
      /// <summary>
      /// Returns partition level stats for a single partition. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PartitionStats> GetPartitionStatsAsync(global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPartitionStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns partition level stats for a single partition. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Mackerel.RemoteCache.Api.V1.PartitionStats> GetPartitionStatsAsync(global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPartitionStats, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MaintenanceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MaintenanceServiceClient(configuration);
      }
    }

  }
}
#endregion
