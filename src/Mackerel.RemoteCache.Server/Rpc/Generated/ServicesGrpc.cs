// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: services.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mackerel.RemoteCache.Api.V1 {
  /// <summary>
  /// Service definition for the remote cache API. 
  /// A distributed in-memory key-value store.
  /// </summary>
  public static partial class RemoteCacheService
  {
    static readonly string __ServiceName = "Mackerel.RemoteCache.Api.RemoteCacheService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetRequest> __Marshaller_Mackerel_RemoteCache_Api_GetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetResponse> __Marshaller_Mackerel_RemoteCache_Api_GetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetManyRequest> __Marshaller_Mackerel_RemoteCache_Api_GetManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetManyResponse> __Marshaller_Mackerel_RemoteCache_Api_GetManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchRequest> __Marshaller_Mackerel_RemoteCache_Api_TouchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchResponse> __Marshaller_Mackerel_RemoteCache_Api_TouchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest> __Marshaller_Mackerel_RemoteCache_Api_TouchManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> __Marshaller_Mackerel_RemoteCache_Api_TouchManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlRequest> __Marshaller_Mackerel_RemoteCache_Api_TtlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlResponse> __Marshaller_Mackerel_RemoteCache_Api_TtlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest> __Marshaller_Mackerel_RemoteCache_Api_TtlManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> __Marshaller_Mackerel_RemoteCache_Api_TtlManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutRequest> __Marshaller_Mackerel_RemoteCache_Api_PutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutResponse> __Marshaller_Mackerel_RemoteCache_Api_PutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutManyRequest> __Marshaller_Mackerel_RemoteCache_Api_PutManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutManyResponse> __Marshaller_Mackerel_RemoteCache_Api_PutManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteRequest> __Marshaller_Mackerel_RemoteCache_Api_DeleteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteResponse> __Marshaller_Mackerel_RemoteCache_Api_DeleteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest> __Marshaller_Mackerel_RemoteCache_Api_DeleteManyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> __Marshaller_Mackerel_RemoteCache_Api_DeleteManyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest> __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest> __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest> __Marshaller_Mackerel_RemoteCache_Api_PutPartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> __Marshaller_Mackerel_RemoteCache_Api_PutPartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest> __Marshaller_Mackerel_RemoteCache_Api_FlushAllRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushAllRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> __Marshaller_Mackerel_RemoteCache_Api_FlushAllResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest> __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest> __Marshaller_Mackerel_RemoteCache_Api_ScanKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> __Marshaller_Mackerel_RemoteCache_Api_ScanKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementRequest> __Marshaller_Mackerel_RemoteCache_Api_IncrementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementResponse> __Marshaller_Mackerel_RemoteCache_Api_IncrementResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest> __Marshaller_Mackerel_RemoteCache_Api_IncrementByRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementByRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> __Marshaller_Mackerel_RemoteCache_Api_IncrementByResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementRequest> __Marshaller_Mackerel_RemoteCache_Api_DecrementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementResponse> __Marshaller_Mackerel_RemoteCache_Api_DecrementResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest> __Marshaller_Mackerel_RemoteCache_Api_DecrementByRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementByRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> __Marshaller_Mackerel_RemoteCache_Api_DecrementByResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetRequest, global::Mackerel.RemoteCache.Api.V1.GetResponse> __Method_Get = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetRequest, global::Mackerel.RemoteCache.Api.V1.GetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Mackerel_RemoteCache_Api_GetRequest,
        __Marshaller_Mackerel_RemoteCache_Api_GetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetManyRequest, global::Mackerel.RemoteCache.Api.V1.GetManyResponse> __Method_GetMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetManyRequest, global::Mackerel.RemoteCache.Api.V1.GetManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMany",
        __Marshaller_Mackerel_RemoteCache_Api_GetManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_GetManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchRequest, global::Mackerel.RemoteCache.Api.V1.TouchResponse> __Method_Touch = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchRequest, global::Mackerel.RemoteCache.Api.V1.TouchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Touch",
        __Marshaller_Mackerel_RemoteCache_Api_TouchRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TouchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> __Method_TouchMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TouchMany",
        __Marshaller_Mackerel_RemoteCache_Api_TouchManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TouchManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlRequest, global::Mackerel.RemoteCache.Api.V1.TtlResponse> __Method_Ttl = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlRequest, global::Mackerel.RemoteCache.Api.V1.TtlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ttl",
        __Marshaller_Mackerel_RemoteCache_Api_TtlRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TtlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> __Method_TtlMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TtlMany",
        __Marshaller_Mackerel_RemoteCache_Api_TtlManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_TtlManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutRequest, global::Mackerel.RemoteCache.Api.V1.PutResponse> __Method_Put = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutRequest, global::Mackerel.RemoteCache.Api.V1.PutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Put",
        __Marshaller_Mackerel_RemoteCache_Api_PutRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutManyRequest, global::Mackerel.RemoteCache.Api.V1.PutManyResponse> __Method_PutMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutManyRequest, global::Mackerel.RemoteCache.Api.V1.PutManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutMany",
        __Marshaller_Mackerel_RemoteCache_Api_PutManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> __Method_PutIfNotExists = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfNotExists",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> __Method_PutIfNotExistsMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfNotExistsMany",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfNotExistsManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> __Method_PutIfExists = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfExists",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> __Method_PutIfExistsMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIfExistsMany",
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutIfExistsManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteRequest, global::Mackerel.RemoteCache.Api.V1.DeleteResponse> __Method_Delete = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteRequest, global::Mackerel.RemoteCache.Api.V1.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Mackerel_RemoteCache_Api_DeleteRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DeleteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> __Method_DeleteMany = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMany",
        __Marshaller_Mackerel_RemoteCache_Api_DeleteManyRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DeleteManyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> __Method_FlushPartition = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushPartition",
        __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionRequest,
        __Marshaller_Mackerel_RemoteCache_Api_FlushPartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> __Method_DeletePartition = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePartition",
        __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DeletePartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> __Method_PutPartition = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutPartition",
        __Marshaller_Mackerel_RemoteCache_Api_PutPartitionRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PutPartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> __Method_FlushAll = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushAll",
        __Marshaller_Mackerel_RemoteCache_Api_FlushAllRequest,
        __Marshaller_Mackerel_RemoteCache_Api_FlushAllResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> __Method_ScanPartitions = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ScanPartitions",
        __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_ScanPartitionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> __Method_ScanKeys = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ScanKeys",
        __Marshaller_Mackerel_RemoteCache_Api_ScanKeysRequest,
        __Marshaller_Mackerel_RemoteCache_Api_ScanKeysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementRequest, global::Mackerel.RemoteCache.Api.V1.IncrementResponse> __Method_Increment = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementRequest, global::Mackerel.RemoteCache.Api.V1.IncrementResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Increment",
        __Marshaller_Mackerel_RemoteCache_Api_IncrementRequest,
        __Marshaller_Mackerel_RemoteCache_Api_IncrementResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> __Method_IncrementBy = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncrementBy",
        __Marshaller_Mackerel_RemoteCache_Api_IncrementByRequest,
        __Marshaller_Mackerel_RemoteCache_Api_IncrementByResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementRequest, global::Mackerel.RemoteCache.Api.V1.DecrementResponse> __Method_Decrement = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementRequest, global::Mackerel.RemoteCache.Api.V1.DecrementResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Decrement",
        __Marshaller_Mackerel_RemoteCache_Api_DecrementRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DecrementResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> __Method_DecrementBy = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecrementBy",
        __Marshaller_Mackerel_RemoteCache_Api_DecrementByRequest,
        __Marshaller_Mackerel_RemoteCache_Api_DecrementByResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mackerel.RemoteCache.Api.V1.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RemoteCacheService</summary>
    [grpc::BindServiceMethod(typeof(RemoteCacheService), "BindService")]
    public abstract partial class RemoteCacheServiceBase
    {
      /// <summary>
      /// Gets the value at the specified key.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.GetResponse> Get(global::Mackerel.RemoteCache.Api.V1.GetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the values at the specified keys.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.GetManyResponse> GetMany(global::Mackerel.RemoteCache.Api.V1.GetManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the last access time of a key.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.TouchResponse> Touch(global::Mackerel.RemoteCache.Api.V1.TouchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the last access time of the specified keys.
      /// Only supported for partitions with sliding expiration set.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.TouchManyResponse> TouchMany(global::Mackerel.RemoteCache.Api.V1.TouchManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the remaining time to live (ms) of a key.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.TtlResponse> Ttl(global::Mackerel.RemoteCache.Api.V1.TtlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the remaining time to live (ms) of the specified keys.
      /// Returns -1 if the key has no expiration and -2 if the key does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.TtlManyResponse> TtlMany(global::Mackerel.RemoteCache.Api.V1.TtlManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets a key-value in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new entry is created.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutResponse> Put(global::Mackerel.RemoteCache.Api.V1.PutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets multiple key-value pairs in the cache. If they already exist,
      /// they're updated, if they don't exist, new entries are created.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutManyResponse> PutMany(global::Mackerel.RemoteCache.Api.V1.PutManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets a key-value in the cache only if it doesn't already exist.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse> PutIfNotExists(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they don't already exist.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse> PutIfNotExistsMany(global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets a key-value in the cache only if exists already.
      /// As a side effect of calling this function:
      /// 1. The value's last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If the key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse> PutIfExists(global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets multiple key-value pairs in the cache only if they exist already.
      /// As a side effect of calling this function:
      /// 1. The values last access time is updated.
      /// 2. The global count stats are updated.
      /// 3. If a key already exists but is expired, it is not updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse> PutIfExistsMany(global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a value by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.DeleteResponse> Delete(global::Mackerel.RemoteCache.Api.V1.DeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes multiple values by key.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse> DeleteMany(global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Flushes the entire partition and resets the count stats. The partition metadata remains in the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse> FlushPartition(global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Flushes the entire partition, resets the count stats, and removes the partition metadata from the cache.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse> DeletePartition(global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets a partition in the cache. If it already exists,
      /// it's updated, if it doesn't exist, a new partition is created.
      /// Only partitions created through this method have the option
      /// to have their metadata persisted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse> PutPartition(global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes all data from the cache across all partitions.
      /// As a side effect of calling this function:
      /// 1. The global count stats are updated.
      /// 2. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.FlushAllResponse> FlushAll(global::Mackerel.RemoteCache.Api.V1.FlushAllRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Iterates all partitions and returns matching results based on a glob-style pattern.
      /// Only offers limited guarantees about the returned elements since the collection 
      /// that we iterate may change during the iteration process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ScanPartitions(global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest request, grpc::IServerStreamWriter<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Iterates all keys in a given partition and returns matching results based on a glob-style pattern. 
      /// Only offers limited guarantees about the returned elements since the collection 
      /// that we iterate may change during the iteration process.
      /// As a side effect of calling this function, any matching keys:
      /// 1. A value gets expired if it reached it's TTL.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ScanKeys(global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest request, grpc::IServerStreamWriter<global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Increments a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.IncrementResponse> Increment(global::Mackerel.RemoteCache.Api.V1.IncrementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Increments a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.IncrementByResponse> IncrementBy(global::Mackerel.RemoteCache.Api.V1.IncrementByRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Decrements a number stored at a key. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.DecrementResponse> Decrement(global::Mackerel.RemoteCache.Api.V1.DecrementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Decrements a number stored at a key by the requested value. If it doesn't exist, 
      /// it is assumed to be zero before running the request.
      /// As a side effect of calling this function:
      /// 1. A value gets expired if it reached it's TTL.
      /// 2. The value's last access time is updated.
      /// 3. The global hit/miss/count stats are updated.
      /// 4. Any watchers of affected keys are notified
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.DecrementByResponse> DecrementBy(global::Mackerel.RemoteCache.Api.V1.DecrementByRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RemoteCacheServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetMany, serviceImpl.GetMany)
          .AddMethod(__Method_Touch, serviceImpl.Touch)
          .AddMethod(__Method_TouchMany, serviceImpl.TouchMany)
          .AddMethod(__Method_Ttl, serviceImpl.Ttl)
          .AddMethod(__Method_TtlMany, serviceImpl.TtlMany)
          .AddMethod(__Method_Put, serviceImpl.Put)
          .AddMethod(__Method_PutMany, serviceImpl.PutMany)
          .AddMethod(__Method_PutIfNotExists, serviceImpl.PutIfNotExists)
          .AddMethod(__Method_PutIfNotExistsMany, serviceImpl.PutIfNotExistsMany)
          .AddMethod(__Method_PutIfExists, serviceImpl.PutIfExists)
          .AddMethod(__Method_PutIfExistsMany, serviceImpl.PutIfExistsMany)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteMany, serviceImpl.DeleteMany)
          .AddMethod(__Method_FlushPartition, serviceImpl.FlushPartition)
          .AddMethod(__Method_DeletePartition, serviceImpl.DeletePartition)
          .AddMethod(__Method_PutPartition, serviceImpl.PutPartition)
          .AddMethod(__Method_FlushAll, serviceImpl.FlushAll)
          .AddMethod(__Method_ScanPartitions, serviceImpl.ScanPartitions)
          .AddMethod(__Method_ScanKeys, serviceImpl.ScanKeys)
          .AddMethod(__Method_Increment, serviceImpl.Increment)
          .AddMethod(__Method_IncrementBy, serviceImpl.IncrementBy)
          .AddMethod(__Method_Decrement, serviceImpl.Decrement)
          .AddMethod(__Method_DecrementBy, serviceImpl.DecrementBy).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RemoteCacheServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.GetRequest, global::Mackerel.RemoteCache.Api.V1.GetResponse>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.GetManyRequest, global::Mackerel.RemoteCache.Api.V1.GetManyResponse>(serviceImpl.GetMany));
      serviceBinder.AddMethod(__Method_Touch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.TouchRequest, global::Mackerel.RemoteCache.Api.V1.TouchResponse>(serviceImpl.Touch));
      serviceBinder.AddMethod(__Method_TouchMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.TouchManyRequest, global::Mackerel.RemoteCache.Api.V1.TouchManyResponse>(serviceImpl.TouchMany));
      serviceBinder.AddMethod(__Method_Ttl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.TtlRequest, global::Mackerel.RemoteCache.Api.V1.TtlResponse>(serviceImpl.Ttl));
      serviceBinder.AddMethod(__Method_TtlMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.TtlManyRequest, global::Mackerel.RemoteCache.Api.V1.TtlManyResponse>(serviceImpl.TtlMany));
      serviceBinder.AddMethod(__Method_Put, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutRequest, global::Mackerel.RemoteCache.Api.V1.PutResponse>(serviceImpl.Put));
      serviceBinder.AddMethod(__Method_PutMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutManyRequest, global::Mackerel.RemoteCache.Api.V1.PutManyResponse>(serviceImpl.PutMany));
      serviceBinder.AddMethod(__Method_PutIfNotExists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsResponse>(serviceImpl.PutIfNotExists));
      serviceBinder.AddMethod(__Method_PutIfNotExistsMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfNotExistsManyResponse>(serviceImpl.PutIfNotExistsMany));
      serviceBinder.AddMethod(__Method_PutIfExists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutIfExistsRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsResponse>(serviceImpl.PutIfExists));
      serviceBinder.AddMethod(__Method_PutIfExistsMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyRequest, global::Mackerel.RemoteCache.Api.V1.PutIfExistsManyResponse>(serviceImpl.PutIfExistsMany));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.DeleteRequest, global::Mackerel.RemoteCache.Api.V1.DeleteResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteMany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.DeleteManyRequest, global::Mackerel.RemoteCache.Api.V1.DeleteManyResponse>(serviceImpl.DeleteMany));
      serviceBinder.AddMethod(__Method_FlushPartition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.FlushPartitionRequest, global::Mackerel.RemoteCache.Api.V1.FlushPartitionResponse>(serviceImpl.FlushPartition));
      serviceBinder.AddMethod(__Method_DeletePartition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.DeletePartitionRequest, global::Mackerel.RemoteCache.Api.V1.DeletePartitionResponse>(serviceImpl.DeletePartition));
      serviceBinder.AddMethod(__Method_PutPartition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PutPartitionRequest, global::Mackerel.RemoteCache.Api.V1.PutPartitionResponse>(serviceImpl.PutPartition));
      serviceBinder.AddMethod(__Method_FlushAll, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.FlushAllRequest, global::Mackerel.RemoteCache.Api.V1.FlushAllResponse>(serviceImpl.FlushAll));
      serviceBinder.AddMethod(__Method_ScanPartitions, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mackerel.RemoteCache.Api.V1.ScanPartitionsRequest, global::Mackerel.RemoteCache.Api.V1.ScanPartitionsResponse>(serviceImpl.ScanPartitions));
      serviceBinder.AddMethod(__Method_ScanKeys, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Mackerel.RemoteCache.Api.V1.ScanKeysRequest, global::Mackerel.RemoteCache.Api.V1.ScanKeysResponse>(serviceImpl.ScanKeys));
      serviceBinder.AddMethod(__Method_Increment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.IncrementRequest, global::Mackerel.RemoteCache.Api.V1.IncrementResponse>(serviceImpl.Increment));
      serviceBinder.AddMethod(__Method_IncrementBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.IncrementByRequest, global::Mackerel.RemoteCache.Api.V1.IncrementByResponse>(serviceImpl.IncrementBy));
      serviceBinder.AddMethod(__Method_Decrement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.DecrementRequest, global::Mackerel.RemoteCache.Api.V1.DecrementResponse>(serviceImpl.Decrement));
      serviceBinder.AddMethod(__Method_DecrementBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.DecrementByRequest, global::Mackerel.RemoteCache.Api.V1.DecrementByResponse>(serviceImpl.DecrementBy));
    }

  }
  public static partial class WatchService
  {
    static readonly string __ServiceName = "Mackerel.RemoteCache.Api.WatchService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.WatchRequest> __Marshaller_Mackerel_RemoteCache_Api_WatchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.WatchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.WatchResponse> __Marshaller_Mackerel_RemoteCache_Api_WatchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.WatchResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse> __Method_Watch = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Watch",
        __Marshaller_Mackerel_RemoteCache_Api_WatchRequest,
        __Marshaller_Mackerel_RemoteCache_Api_WatchResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mackerel.RemoteCache.Api.V1.ServicesReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of WatchService</summary>
    [grpc::BindServiceMethod(typeof(WatchService), "BindService")]
    public abstract partial class WatchServiceBase
    {
      /// <summary>
      /// Watches for changes to keys. Both input and output are streams; 
      /// the input stream is for periodically sending heartbeats and the output
      /// stream sends key change events.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Watch(grpc::IAsyncStreamReader<global::Mackerel.RemoteCache.Api.V1.WatchRequest> requestStream, grpc::IServerStreamWriter<global::Mackerel.RemoteCache.Api.V1.WatchResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WatchServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Watch, serviceImpl.Watch).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WatchServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Watch, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Mackerel.RemoteCache.Api.V1.WatchRequest, global::Mackerel.RemoteCache.Api.V1.WatchResponse>(serviceImpl.Watch));
    }

  }
  public static partial class MaintenanceService
  {
    static readonly string __ServiceName = "Mackerel.RemoteCache.Api.MaintenanceService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest> __Marshaller_Mackerel_RemoteCache_Api_GetStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.CacheStats> __Marshaller_Mackerel_RemoteCache_Api_CacheStats = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.CacheStats.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetConfRequest> __Marshaller_Mackerel_RemoteCache_Api_GetConfRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetConfRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> __Marshaller_Mackerel_RemoteCache_Api_CacheConfiguration = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest> __Marshaller_Mackerel_RemoteCache_Api_InvokeGCRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> __Marshaller_Mackerel_RemoteCache_Api_InvokeGCResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PingRequest> __Marshaller_Mackerel_RemoteCache_Api_PingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PongResponse> __Marshaller_Mackerel_RemoteCache_Api_PongResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PongResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest> __Marshaller_Mackerel_RemoteCache_Api_GetPartitionStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Mackerel.RemoteCache.Api.V1.PartitionStats> __Marshaller_Mackerel_RemoteCache_Api_PartitionStats = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Mackerel.RemoteCache.Api.V1.PartitionStats.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest, global::Mackerel.RemoteCache.Api.V1.CacheStats> __Method_GetStats = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest, global::Mackerel.RemoteCache.Api.V1.CacheStats>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStats",
        __Marshaller_Mackerel_RemoteCache_Api_GetStatsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_CacheStats);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetConfRequest, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> __Method_GetConf = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetConfRequest, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConf",
        __Marshaller_Mackerel_RemoteCache_Api_GetConfRequest,
        __Marshaller_Mackerel_RemoteCache_Api_CacheConfiguration);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> __Method_InvokeGC = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InvokeGC",
        __Marshaller_Mackerel_RemoteCache_Api_InvokeGCRequest,
        __Marshaller_Mackerel_RemoteCache_Api_InvokeGCResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.PingRequest, global::Mackerel.RemoteCache.Api.V1.PongResponse> __Method_Ping = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.PingRequest, global::Mackerel.RemoteCache.Api.V1.PongResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_Mackerel_RemoteCache_Api_PingRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PongResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest, global::Mackerel.RemoteCache.Api.V1.PartitionStats> __Method_GetPartitionStats = new grpc::Method<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest, global::Mackerel.RemoteCache.Api.V1.PartitionStats>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPartitionStats",
        __Marshaller_Mackerel_RemoteCache_Api_GetPartitionStatsRequest,
        __Marshaller_Mackerel_RemoteCache_Api_PartitionStats);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mackerel.RemoteCache.Api.V1.ServicesReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of MaintenanceService</summary>
    [grpc::BindServiceMethod(typeof(MaintenanceService), "BindService")]
    public abstract partial class MaintenanceServiceBase
    {
      /// <summary>
      /// Returns the global stats such as hits, misses, etc.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.CacheStats> GetStats(global::Mackerel.RemoteCache.Api.V1.GetStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the configuration settings for the node
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.CacheConfiguration> GetConf(global::Mackerel.RemoteCache.Api.V1.GetConfRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Forces an immediate collection of all generations and compacts the LOH. This is not recommended.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse> InvokeGC(global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ping the node to check availability
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PongResponse> Ping(global::Mackerel.RemoteCache.Api.V1.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns partition level stats for a single partition. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Mackerel.RemoteCache.Api.V1.PartitionStats> GetPartitionStats(global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MaintenanceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetStats, serviceImpl.GetStats)
          .AddMethod(__Method_GetConf, serviceImpl.GetConf)
          .AddMethod(__Method_InvokeGC, serviceImpl.InvokeGC)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_GetPartitionStats, serviceImpl.GetPartitionStats).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MaintenanceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.GetStatsRequest, global::Mackerel.RemoteCache.Api.V1.CacheStats>(serviceImpl.GetStats));
      serviceBinder.AddMethod(__Method_GetConf, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.GetConfRequest, global::Mackerel.RemoteCache.Api.V1.CacheConfiguration>(serviceImpl.GetConf));
      serviceBinder.AddMethod(__Method_InvokeGC, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.InvokeGCRequest, global::Mackerel.RemoteCache.Api.V1.InvokeGCResponse>(serviceImpl.InvokeGC));
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.PingRequest, global::Mackerel.RemoteCache.Api.V1.PongResponse>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_GetPartitionStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mackerel.RemoteCache.Api.V1.GetPartitionStatsRequest, global::Mackerel.RemoteCache.Api.V1.PartitionStats>(serviceImpl.GetPartitionStats));
    }

  }
}
#endregion
